# Administrivia and Py Ingredients: Numbers, Strings, and Variables

-   Python can be run interactively (REPL) No semicolons

## Variables

-   `x=3`

## Numbers

-   `+`, `-`, `*`, `/` Defaults to floating point division, use `//` for
-   integer division Math functions `import math` `math.sqrt(9)`

## Types

-   Dynamically types The following are "simple" types; Python doesn't really
      have a notion of "primitive", because **everything** is an object. Each
      type also names a conversion function.
-   `bool` `int` `float` `str`

## Strings

-   Single or double quotes
    -   Each obviates escaping the other
    -   REPL output includes quotes, print doesn't
        -   Can have " inside ' and vice versa
        -   Escape other characters in the usual way
    -   Three single or double quotes for multi-line strings
-   `wiener` + `dog`
-   `+=` can also be useful
-   Doesn't automatically convert numbers
-   `*` for duplication
-   `[]` for access
    -   Negative index from end
    -   No special char type
    -   Strings are immutable
-   Slicing
    -   `[start:]`
    -   `[:end]`
    -   `[start:end:step]` Any of these can be left out or negative
    -   `s[::-1]` returns a reversed version of `s`
-   `len(s)`
-   `s.split(separator)`
    -   Result is a list
    -   White space if no separator is specified
-   `separator.join(list)`

# Py Filling: Lists, Tuples, Dictionaries, and Sets

## Lists

-   Created with `[]`
-   `list` takes 0 or 1 arguments
-   Nesting
-   Element access and slicing are same as with strings
    -   Lists are mutable
-   `s.sort()` sorts `s` in place
-   `sorted(s)` returns a sorted copy of `s`
-   `s.copy()`, `list(s)`, and `s[:]` all make copies

## Tuples

-   Immutable, so safer
    -   Reuse can save memory
-   Use `()` instead of `[]`
-   Tuple unpacking and packing
-   Convert using `tuple()`

## Dictionaries

-   Associate Keys with values
    -   Aka map, hashmap, hash, associative array
-   `{1: one, 2: two}`
-   Convert a sequence of pairs using `dict()` 
-   Keys must be immutable 
-   No duplicate keys, duplicate values okay 
-   New values replace old

## Sets

-   Like dictionaries without values 
-   Does not maintain order 
-   Create with `{}`
-   Convert with `set()`
-   `\&` intersection 
-   `\|` union 
-   `-` set difference 
-   `^` xor 
-   `<=` subset 
-   `<` proper subset 
-   `>=` super set

# Turing Test

## Alan Turing 1912-1954

-   Important theory of computation
    -   Mathematical model of computer (Turing machine)
        -   Any "Turing-complete" computer can simulate time and memory), so they're all equivalent
    -   Some problems are unsolvable
        -   Halting problem
-   During WWII, developed machine to break German codes
    -   Knighted (OBE), 1946 
-   Convicted of "gross indecency" for homosexuality, 1952
    -   Chose probation and hormone injections over prison
    -   Denied entry into US as a result
-   Died of cyanide poisoning, 1954
    -   Ruled suicide, but there is some debate
-   Pardoned by the Queen in 2014

## Imitation Game

-   Loebner prize

## Contrary Views

-   "I believe that at the end of the century the use of words and general educated option will have altered so much that one will be able to speak of machines thinking without expecting to be contradicted."
-   Theological Objection
    -   Turing is unimpressed
-   Heads in the Sand Objection
    -   Singularity
-   Mathematical Objection
    -   GÃ¶del's theorem
        -   Any sufficiently powerful mathematical system contains true statements that cannot be proven
    -   Uncomputability
    -   No basis for assertion that humans are immune to this
        -   Collatz conjecture
-   Argument from Consciousness
    -   How do we know other people think? 
    -   Thinking vs "artificially signaling"
    -   Searle's Chinese Room
-   Arguments from Various Disabilities
    -   No machine has done X, so no machine can
    -   Strange comment about friendliness "between white man and white man, or between black man and black man"
    -   Machines cannot make mistakes
        -   They could deliberately do so 
    -   Computers can "think" about their own programming
-   Lady Lovelace's Objection
    -   Charles Babbage 1791-1871
        -   Difference engine, designed 1822
            -   Never build in his lifetime
            -   One was finished in 1991
        -   Analytical engine 
            -   Programmed using punched cards
            -   Turing-complete Also never built
    -   Ada Lovelace 1815-1852
        -   Worked with Babbage 
        -   Studies mathematics to keep her from succumbing to poetry 
            -   Her father was Lord Byron
        -   In 1840, Babbage gave a talk on the analytical engine in Italy
            -   An Italian engineer wrote up the lecture in French
            -   Ada was tasked with translating it into English
            -   She added extensive notes
            -   One contained the first computer program
        -   A computer can only do what we tell it to do, not create anything new
            -   Is anything really new? 
            -   Computers surprised Turing all the time 
            -   "The assumption that as soon as a fact is presented to a mind all useful consequences of that fact spring into the mind simultaneously with it."
-   Argument from Continuity in the Nervous System 
    -   Meh, you can simulate floating point numbers
-   Argument from Informality of Behavior
    -   Rules -> machine, no rules for people, therefore people are not machines
        -   Invalid logic
    -   Laws of behavior vs rules of conduct
        -   How do we know there are no laws of behavior?
    -   Having laws of behavior does not imply predictability
        -   Pseudo random number generator
-   Argument form Extrasensory Perception
    -   Turing finds this compelling!
    -   Solution: telepathy-proof room

## Learning Machines

-   Elitism: most minds are sub critical
-   Skin-of-an-onion analogy fro discussing minds
-   "the problem is mainly one of programming. Advances in engineering will have to be made too."
-   Develop a child machine and teach it
    -   Analogy with natural selection, foreshadowing genetic algorithms
    -   Rewards and punishments Later, communication through symbolic language
    -   Building in a system of logical interface
    -   Can change higher-level, ephemeral rules
    -   The "teacher will often be very largely ignorant of quite what is going on inside"
-   What tasks to tackle? 
    -   Chess? 
    -   English?

# Py Crust: Code Structures

-   Comment with `#` to end of line
-   Continue lines with `\\`

## if/elif/else

-   No parenthesis, but a colon
-   Indentation matters
    -   This fixes the dangling else problem
    -   Use spaces, not tabs
-   Remember truthiness
-   `3 < x < 5` works

## While

-   `break`
-   `continue`

## for

-   works on an iterable
    -   Sequences, sets, dictionaries, and some other things are iterable
    -   Strings, tuples and lists are sequences
    -   Similar to Java's foreach loop 
-   `zip` to iterate across multiple sequences
-   `range`
    -   `range(stop)`
    -   `range(start, stop)` 
    -   `range(start, stop, step)` 
-   `enumerate`

## Comprehensions

-   List comprehensions
-   Dictionary comprehensions 
-   Set comprehensions 
-   Generator comprehensions

## Functions

`python def name(params): body ...  return`

# Rational Agents

# Py Boxes: Modules, Packages, and Programs

# Uniform Search

# Heuristic Search

# Minimax Search

# Monte Carlo Tree Search

# NumPy

# Matplotlib
